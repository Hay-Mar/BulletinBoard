all null
2.name
3.email
4.date
5.nam && email
6.name && date
7.email && date
8.name && email && date

if (null){
}
else{
  if (name){
    if (email){
      if (date){
      //8.name && email && date
      }
      else{
      //5.nam && email
      }
    }
    else{ //!email
      if (date){
      //6.name && date
      }
      else{
      //2.name
      }
    }
  }
  else{ //!name
    if (email){
      if (date){
      //7.email && date
      }
      else{
      //3.email
      }
    }
    else{ //!email
      if (date){
      //4.date
      }
    }
  }
}



----------------------------------------------------------------------------------
----------------------------------------------------------------------------------

 $bothfilled = false;
        $fromfilled = false;
        $tofilled = false;
        if ($request->filled('createdfrom') && $request->filled('createdto')) {
            $bothfilled = true;
        } else {
            if ($request->filled('createdfrom')) {
                $fromfilled = true;
            } elseif ($request->filled('createdto')) {
                $tofilled = true;
            }
        }

        try {
            $users = User::whereNull('users.deleted_at')
                ->join('users AS u', 'users.create_user_id', '=', 'u.id')
                ->select('users.id', 'users.name', 'users.email', 'u.name AS created_user', 'users.phone', 'users.dob', 'users.address', 'users.created_at', 'users.updated_at')
                ->where(function ($query) use ($request, $bothfilled, $fromfilled, $tofilled) {
                    $query->when($request->filled('name'), function ($query) use ($request) {
                        return $query->orWhere('users.name', 'LIKE', '%' . $request->input('name') . '%');
                    });
                    $query->when($request->filled('email'), function ($query) use ($request) {
                        return $query->orWhere('users.email', 'LIKE', '%' . $request->input('email') . '%');
                    });
                    $query->when($bothfilled, function ($query) use ($request) {
                        return $query->orWhereBetween('users.created_at', [$request->input('createdfrom'), $request->input('createdto')]);
                    });
                    $query->when($fromfilled, function ($query) use ($request) {
                        return $query->orWhere('users.created_at', '>=', $request->input('createdfrom'));
                    });
                    $query->when($tofilled, function ($query) use ($request) {
                        return $query->orWhere('users.created_at', '<=', $request->input('createdto'));
                    });
                });

            $users->orderBy('users.id', 'asc');
            $users = $users->paginate(config('constants.pagination'));


----------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------
public function searchUser($name, $email, $date_from, $date_to)
  {
    if ($name == null && $email == null && ($date_from == null || $date_to == null)) {
      $users = User::select(
        'users.name', 
        'users.email', 
        'users.phone', 
        'users.dob', 
        'users.address', 
        'users.created_at', 
        'users.updated_at', 
        'users.id', 
        'u1.name as created_user_name')
        ->join('users as u1', 'u1.id', 'users.create_user_id')
        ->orderBy('users.updated_at', 'DESC')
        ->paginate(10);
    } else {
      if ((isset($name) && isset($email)) &&
      (is_null($date_from) || is_null($date_to))) {
                $users = User::select(
                  'users.name', 
                  'users.email', 
                  'users.phone', 
                  'users.dob', 
                  'users.address', 
                  'users.created_at', 
                  'users.updated_at', 
                  'users.id', 
                  'u1.name as created_user_name')
                  ->where('users.name', 'LIKE', '%' . $name . '%')
                  ->orWhere('users.email', 'LIKE', '%' . $email . '%')
                  ->join('users as u1', 'u1.id', 'users.create_user_id')
                  ->orderBy('users.updated_at', 'DESC')
                  ->paginate(10);
                } else if ((isset($name) || isset($email)) &&
                (is_null($date_from) || is_null($date_to))) {
                $users = User::select(
                  'users.name', 
                  'users.email', 
                  'users.phone', 
                  'users.dob', 
                  'users.address', 
                  'users.created_at', 
                  'users.updated_at', 
                  'users.id', 
                  'u1.name as created_user_name')
                  ->where('users.name', 'LIKE', '%' . $name . '%')
                  ->where('users.email', 'LIKE', '%' . $email . '%')
                  ->join('users as u1', 'u1.id', 'users.create_user_id')           
                  ->orderBy('users.updated_at', 'DESC')
                  ->paginate(10);
                } else if (isset($date_from) && isset($date_to)) {
                  $users = User::select(
                    'users.name', 
                    'users.email', 
                    'users.phone', 
                    'users.dob', 
                    'users.address', 
                    'users.created_at', 
                    'users.updated_at', 
                    'users.id', 
                    'u1.name as created_user_name')
                    ->join('users as u1', 'u1.id', 'users.create_user_id')
                    ->whereBetween('users.created_at', array($date_from, $date_to))
                    ->orderBy('users.updated_at', 'DESC')
                    ->paginate(10);
          }
    }
    return $users;
  }


<div class="row">
        <!-- incorrect date alert-->
        <div class="col-md-8 mx-auto">
            @if (session('search_date_from') > session('search_date_to'))    
                        <div class="alert alert-dismissible alert-warning alertmessage text-danger">
                        <strong>Created From must be early Created To.</strong>
                        <p>{{ Session::get('search_date_from')>('search_date_to')}}</p>
                        <button class="close" type="button" data-dismiss="alert" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
            @endif
        </div>
    </div>
